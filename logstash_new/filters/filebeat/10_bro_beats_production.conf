input {
	beats {
		port => "5044"
		tags => ["brolive1", "bro"]
	}
}

input {
	beats {
		port => "5045"
		tags => ["brolive2", "bro"]
	}
}

filter {
	if "bro" in [tags] {
		if [message] =~ /^#/ {
			drop {}
		}
	}
}

filter {
	if [type] == "bro_conn" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"proto",
			"service",
			"duration",
			"src_bytes",
			"dst_bytes",
			"conn_state",
			"local_src",
			"local_dst",
			"missed_bytes",
			"history",
			"src_pkts",
			"src_ip_bytes",
			"dst_pkts",
			"dst_ip_bytes",
			"tunnel_parents",
			"vlan",
			"inner_vlan",
			"src_cc",
			"dst_cc",
			"sensor_name"
			]
			separator => "	"
		}
		geoip {
			source => "dst_ip"
			fields => ["country_name", "location"]
		}
	} 
}

filter {
	if [type] == "bro_dark_host" {
		csv {
			columns => [
			"ts",
			"host",
			"event_type",
			"last_seen"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_dce_rpc" {
		grok {
			match => [ "message", "^%{DATA:ts}\t%{DATA:uid}\t%{DATA:src_ip}\t%{DATA:src_port}\t%{DATA:dst_ip}\t%{DATA:dst_port}\t%{DATA:rtt}\t%{DATA:named_pipe}\t%{DATA:endpoint}\t%{DATA:operation}$" ]
			remove_field => [ "message" ]
		}
	}
}

filter {
	if [type] == "bro_dhcp" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"mac",
			"assigned_ip",
			"lease_time",
			"trans_id"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_dnp3" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"fc_request",
			"fc_reply",
			"iin"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_dns" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"proto",
			"trans_id",
			"rtt",
			"query",
			"qclass",
			"qclass_name",
			"qtype",
			"qtype_name",
			"rcode",
			"rcode_name",
			"AA",
			"TC",
			"RD",
			"RA",
			"Z",
			"answers",
			"TTLs",
			"rejected",
			"total_answers",
			"total_replies",
			"saw_query",
			"saw_reply",
			"auth",
			"addl"
			]
			separator => "	"
		}	
		geoip {
			source => "dst_ip"
			fields => ["country_name", "location"]
		}
		#entropy catch
		tld {
			source => "query"
			remove_field => "[tld][subdomain]"			
		}
	
		#to get the string length
		ruby {
			code => 'event.set("query_length", event.get("query").length)'
		}				
		#Enrichment - string entropy using Logstash
		ruby {
			code => '
			s = event.get("query")
			event.set("entropy", s.each_char.group_by(&:to_s).values.map{|x|x.length/s.length.to_f}.reduce(0){|e,x|e-x*Math.log2(x)})
			'
		}
		mutate {
			convert => [ "query_length", "integer" ]
		}
	}
}

filter {
	if [type] == "bro_files" {
		csv {
			columns => [
			"ts",
			"fuid",
			"tx_hosts",
			"rx_hosts",
			"conn_uids",
			"source",
			"depth",
			"analyzers",
			"mime_type",
			"filename",
			"duration",
			"local_src",
			"is_src",
			"seen_bytes",
			"total_bytes",
			"missing_bytes",
			"overflow_bytes",
			"timedout",
			"parent_fuid",
			"md5",
			"sha1",
			"sha256",
			"extracted"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_ftp" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"user",
			"password",
			"command",
			"arg",
			"mime_type",
			"file_size",
			"reply_code",
			"reply_msg",
			"data_channel_passivel",
			"data_channel_src_ip",
			"data_channel_dst_ip",
			"data_channel_dst_port",
			"fuid"
			]
			separator => "	"
		}
		mutate {
			convert => [ "reply_code", "integer" ]
			}
	}
}

filter {
	if [type] == "bro_http" {
		grok {
			match => [ "message", "^(?<ts>(.*?))\t(?<uid>(.*?))\t(?<src_ip>(.*?))\t(?<src_port>(.*?))\t(?<dst_ip>(.*?))\t(?<dst_port>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<domain_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<version>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<http_tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<src_fuids>(.*?))\t(?<src_filenames>(.*?))\t(?<src_mime_types>(.*?))\t(?<dst_fuids>(.*?))\t(?<dst_filenames>(.*?))\t(?<dst_mime_types>(.*))$" ]
			remove_field => [ "message" ]
		}
		geoip {
			source => "dst_ip"
			fields => ["country_name", "location"]
		}
		#Create a new filed by combining domain_host and uri fields to get IE: espn.com/oaklandAthletics/schedule
		mutate {
			add_field => {"domain_&_uri" => "%{domain_host}%{uri}"}
		}
		#to get the string length for the new field called domain_&_uri
		ruby {
			code => 'event.set("domain_&_uri_length", event.get("domain_&_uri").length)'
		}
		#Enrichment - Running Entropy math calculation for domain_&_uri
		ruby {
			code => '
				s = event.get("domain_&_uri")
				event.set("entropy", s.each_char.group_by(&:to_s).values.map{|x|x.length/s.length.to_f}.reduce(0){|e,x|e-x*Math.log2(x)})
			'
		}
		#to get the string length for URI field
		ruby {
			code => 'event.set("uri_length", event.get("uri").length)'
		}
		#Enrichment - Entropy Calculation for URI
		ruby {
			code => '
				s = event.get("uri")
				event.set("entropy_uri", s.each_char.group_by(&:to_s).values.map{|x|x.length/s.length.to_f}.reduce(0){|e,x|e-x*Math.log2(x)})
				'
		}
		mutate {
			convert => [ "domain_&_uri_length", "integer" ]
			convert => [ "uri_length", "integer" ]
		}
	}
}


filter {
	if [type] == "bro_intel" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"seen_indicator",
			"seen_indicator_type",
			"seen_where",
			"seen_node",
			"matched",
			"sources",
			"fuid",
			"file_mime_type",
			"file_desc"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_irc" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"nickname",
			"user",
			"command",
			"value",
			"addl",
			"dcc_file_name",
			"dcc_file_size",
			"dcc_mime_type",
			"fuid"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_kerberos" {
		grok {
			match => [ "message", "^(?<ts>(.*?))\t(?<uid>(.*?))\t(?<src_ip>(.*?))\t(?<src_port>(.*?))\t(?<dst_ip>(.*?))\t(?<dst_port>(.*?))\t(?<request_type>(.*?))\t(?<client>(.*?))\t(?<service>(.*?))\t(?<success>(.*?))\t(?<error_msg>(.*?))\t(?<valid_from>(.*?))\t(?<valid_till>(.*?))\t(?<cipher>(.*?))\t(?<forwardable>(.*?))\t(?<renewable>(.*?))\t(?<client_cert_subj>(.*?))\t(?<client_cert_fuid>(.*?))\t(?<server_cert_subj>(.*?))\t(?<server_cert_fuid>(.*))$" ]
			remove_field => [ "message" ]
		}
		if ["valid_from"] !~ /-/ {
			date { match => [ "valid_from", "UNIX" ]
				target => "valid_from"}
		}
		if ["valid_till"] !~ /-/ {
			date { match => [ "valid_till", "UNIX" ]
				target => "valid_till"}
		}
	}
}

filter {
	if [type] == "bro_known_hosts" {
		csv {
			columns => [
			"ts",
			"host"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_known_services" {
		csv {
			columns => [
			"ts",
			"host",
			"port",
			"port_proto",
			"service"
			]
			separator => "	"
		}
	}
}
filter {
	if [type] == "bro_modbus" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"id",
			"func",
			"exception",
			"track_address"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_modbus_register_change" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"register",
			"old_val",
			"new_val",
			"delta"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_mysql" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"cmd",
			"arg",
			"success",
			"rows",
			"response"
			]
			separator => "	"
		}
	}
}
filter {
	if [type] == "bro_notice" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"fuid",
			"file_mime_type",
			"file_desc",
			"proto",
			"note",
			"msg",
			"sub",
			"src",
			"dst",
			"port",
			"count",
			"peer_descr",
			"actions",
			"suppress_for",
			"dropped",
			"remote_location.country_code",
			"remote_location.region",
			"remote_location.city",
			"remote_location.latitude",
			"remote_location.longitude"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_ntlm" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"username",
			"hostname",
			"domainname",
			"success",
			"status",
			"done"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_pe" {
		csv {
			columns => [
			"ts",
			"id",
			"machine",
			"compile_ts",
			"os",
			"subsystem",
			"is_exe",
			"is_64bit",
			"uses_aslr",
			"uses_dep",
			"uses_code_integrity",
			"uses_seh",
			"has_import_table",
			"has_export_table",
			"has_cert_table",
			"has_debug_data",
			"section_names"
			]
			separator => "	"
		}
		if ["compile_ts"] !~ /-/ {
			date { match => [ "compile_ts", "UNIX" ] 
				target => "compile_ts"}
		}
	}
}

filter {
	if [type] == "bro_radius" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"username",
			"mac",
			"remote_ip",
			"connect_info",
			"result",
			"logged"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_rdp" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"cookie",
			"result",
			"security_proto",
			"keyboard_layout",
			"client_build",
			"client_name",
			"client_dig_pro_id",
			"desk_width",
			"desk_height",
			"req_color_depth",
			"cert_type",
			"cert_count",
			"cert_perm",
			"encryption_lvl",
			"encryption_meth"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_rfb" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"client_major_version",
			"client_minor_version",
			"server_major_version",
			"server_minor_version",
			"auth_meth",
			"auth",
			"share_flag",
			"desktop_name",
			"width",
			"height"
			]
			separator => "	"
		}
	}
}


filter {
	if [type] == "bro_signatures" {
		csv {
			columns => [
			"ts",
			"src_addr",
			"src_port",
			"dst_addr",
			"dst_port",
			"note",
			"sig_id",
			"event_msg",
			"sub_msg",
			"sig_count",
			"host_count"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_sip" {
		grok {
			match => [ "message", "^%{DATA:ts}\t%{DATA:uid}\t%{DATA:src_ip}\t%{DATA:src_port}\t%{DATA:dst_ip}\t%{DATA:dst_port}\t%{DATA:trans_depth}\t%{DATA:method}\t%{DATA:uri}\t%{DATA:date}\t%{DATA:request_from}\t%{DATA:request_to}\t%{DATA:response_from}\t%{DATA:response_to}\t%{DATA:reply_to}\t%{DATA:call_id}\t%{DATA:seq}\t%{DATA:subject}\t%{DATA:request_path}\t%{DATA:response_path}\t%{DATA:user_agent}\t%{DATA:status_code}\t%{DATA:status_msg}\t%{DATA:warning}\t%{DATA:request_body_len}\t%{DATA:response_body_len}\t%{DATA:content_type}$" ]
			remove_field => [ "message" ]
		}
	}
}

filter {
	if [type] == "bro_smb_cmd" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"command",
			"sub_command",
			"argument",
			"status",
			"rtt",
			"version",
			"username",
			"tree",
			"tree_service",
			"referenced_file",
			"referenced_tree",
			"smb1_offered_dialects",
			"smb2_offered_dialects"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_smb_files" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"fuid",
			"action",
			"path",
			"name",
			"size",
			"prev_name",
			"times_modified",
			"times_accessed",
			"times_created",
			"times_changed",
			"fid",
			"uuid"
			]
			separator => "	"
		}
		if ["times_modified"] !~ /-/ {
			date { match => [ "times_modified", "UNIX" ] 
				target => "times_modified"}
		}
		if ["times_accessed"] !~ /-/ {	
			date { match => [ "times_accessed", "UNIX" ] 
				target => "times_accessed"}
		}
		if ["times_created"] !~ /-/ {	
			date { match => [ "times_created", "UNIX" ] 
				target => "times_created"}
		}
		if ["times_changed"] !~ /-/ {	
			date { match => [ "times_changed", "UNIX" ] 
				target => "times_changed"}
		}
	}
}

filter {
	if [type] == "bro_smb_mapping" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"path",
			"service",
			"native_file_sys",
			"share_type"
			]
			separator => "	"
			}
	}
}

filter {
	if [type] == "bro_smtp" {
		grok {
			match => [ "message", "^%{DATA:ts}\t%{DATA:uid}\t%{DATA:src_ip}\t%{DATA:src_port}\t%{DATA:dst_ip}\t%{DATA:dst_port}\t%{DATA:trans_depth}\t%{DATA:helo}\t%{DATA:mailfrom}\t%{DATA:rcptto}\t%{DATA:date}\t%{DATA:from}\t%{DATA:to}\t%{DATA:cc}\t%{DATA:reply_to}\t%{DATA:msg_id}\t%{DATA:in_reply_to}\t%{DATA:subject}\t%{DATA:x_originating_ip}\t%{DATA:first_received}\t%{DATA:second_received}\t%{DATA:last_reply}\t%{DATA:path}\t%{DATA:user_agent}\t%{DATA:tls}\t%{DATA:fuids}\t%{DATA:is_webmail}$" ]
			remove_field => [ "message" ]
		}
	}
}

filter {
	if [type] == "bro_snmp" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"duration",
			"version",
			"community",
			"get_requests",
			"get_bulk_requests",
			"get_responses",
			"set_requests",
			"display_string",
			"up_since"
			]
			separator => "	"
		}
	}
}


filter {
	if [type] == "bro_socks" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"version",
			"user",
			"password",
			"status",
			"request_host",
			"request_name",
			"request_port",
			"bound_host",
			"bound_name",
			"bound_port"
			]
			separator => "	"
		}
	}
}


filter {
	if [type] == "bro_software" {
		csv {
			columns => [
			"ts",
			"host",
			"host_port",
			"software_type",
			"name",
			"version_major",
			"version_minor",
			"version_minor2",
			"version_minor3",
			"version_addl",
			"unparsed_version"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_ssh" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"version",
			"auth_success",
			"direction",
			"client",
			"server",
			"cipher_alg",
			"mac_alg",
			"compress_alg",
			"kex_alg",
			"host_key_alg",
			"host_key",
			"remote_location.country_code",
			"remote_location.region",
			"remote_location.city",
			"remote_location.latitude",
			"remote_location.longitude"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_ssl" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"version",
			"cipher",
			"curve",
			"server_name",
			"resumed",
			"last alert",
			"next_proto",
			"established",
			"cert_chain_fuids",
			"client_cert_chain_fuids",
			"subject",
			"issuer",
			"client_subject",
			"client_issuer",
			"client_ciphers",
			"validation_status"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_syslog" {
		grok {
			match => [ "message", "^%{DATA:ts}\t%{DATA:uid}\t%{DATA:src_ip}\t%{DATA:src_port}\t%{DATA:dst_ip}\t%{DATA:dst_port}\t%{DATA:proto}\t%{DATA:facility}\t%{DATA:severity}\t%{DATA:messages}$" ]
			remove_field => [ "message" ]
		}
	}
}

filter {
	if [type] == "bro_traceroute" {
		csv {
			columns => [
			"ts",
			"src_ip",
			"dst_ip",
			"proto"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_tunnel" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"tunnel_type",
			"action"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_weird" {
		csv {
			columns => [
			"ts",
			"uid",
			"src_ip",
			"src_port",
			"dst_ip",
			"dst_port",
			"name",
			"addl",
			"notice",
			"peer"
			]
			separator => "	"
		}
	}
}

filter {
	if [type] == "bro_x509" {
		csv {
			columns => [
			"ts",
			"id",
			"certificate.version",
			"certificate.serial",
			"certificate.subject",
			"certificate.issuer",
			"certificate.not_valid_before",
			"certificate.not_valid_after",
			"certificate.key_alg",
			"certificate.sig_alg",
			"certificate.key_type",
			"certificate.key_length",
			"certificate.exponent",
			"certificate.curve",
			"san.dns",
			"san.uri",
			"san.email",
			"san.ip",
			"basic_constraints.ca",
			"basic_constraints.path_len"
			]
			separator => "	"
		}
		if ["certificate.not_valid_before"] !~ /-/ {
			date { match => [ "certificate.not_valid_before", "UNIX" ] 
				target => "certificate.not_valid_before"}
		}
		if ["certificate.not_valid_after"] !~ /-/ {
			date { match => [ "certificate.not_valid_after", "UNIX" ] 
				target => "certificate.not_valid_after"}
		}
	}
}

filter {
	if "bro" in [tags] {
		mutate {
			convert => [ "bytes", "integer" ]
			convert => [ "duration", "float" ]
			convert => [ "src_bytes", "integer" ]
			convert => [ "dst_bytes", "integer" ]
			convert => [ "missed_bytes", "integer" ]
			convert => [ "src_pkts", "integer" ]
			convert => [ "dst_pkts", "integer" ]
			convert => [ "src_ip_bytes", "integer" ]
			convert => [ "dst_ip_bytes", "integer" ]
			convert => [ "missing_bytes", "integer" ]
			convert => [ "total_bytes", "integer" ]
			convert => [ "overflowing_bytes", "integer" ]
			convert => [ "depth", "integer" ]
			convert => [ "seen_bytes", "integer" ]
			convert => [ "overflow_bytes", "integer" ]
			convert => [ "trans_depth", "integer" ]
			convert => [ "request_body_len", "integer" ]
			convert => [ "response_body_len", "integer" ]
			convert => [ "status_code", "integer" ]
			convert => [ "info_code", "integer" ]
			convert => [ "port", "integer" ]
			convert => [ "count", "integer" ]
			convert => [ "suppress_for", "float" ]
			convert => [ "src_port", "integer" ]
			convert => [ "dst_port", "integer" ]
			remove_tag => [ "_dateparsefailure" ]
			remove_tag => [ "_geoip_lookup_failure" ]
			remove_tag => [ "beats_input_codec_plain_applied" ]
		}
		if ["ts"] !~ /-/ {
			date { match => [ "ts", "UNIX" ] }
		}
		mutate {
			convert => [ "ts", "float" ]
		}
	}
}

output {
	if "bro" in [tags] {
		elasticsearch {
			index => "logstash-brostash2-%{+YYYY.MM.dd}"
			hosts => [ "10.20.52.149" ]
			flush_size => "10000"
			pool_max => "5000"
			pool_max_per_route => "2500"
			retry_initial_interval => "10"
			timeout => "120"
		}
	}
}

output {
	if "brolive2" in [tags] {
		elasticsearch {
			index => "logstash-brolive2-%{+YYYY.MM.dd}"
			hosts => [ "10.20.52.137" ]
			flush_size => "10000"
			pool_max => "5000"
			pool_max_per_route => "2500"
			retry_initial_interval => "10"
			timeout => "120"
		}
	}
}
