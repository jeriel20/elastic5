#Opens file location
input {
	file{
		path => ["/ns/dec*/ns.log*", "/ns/nov*/ns.log*"]
		sincedb_path => "/home/jeriel/Desktop/.netscape"
		type => "ns"
		close_older => 360000
		start_position => "beginning"
	}
}

# drops all log rotation lines that we don't need
filter {
	if [message] =~ /100K/ {
		drop {}
	}
}
#Grok to match on pattern and add a tag
filter {
	if [type] == "ns" {
		grok {
			break_on_match => true
			match => [
				"message", "^%{CISCOTIMESTAMP:timestamp1} <%{SYSLOGHOST:netscaler_host}> %{SYSLOGHOST:netscaler_ip} %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:name} %{SYSLOGHOST:ppe_type} : %{GREEDYDATA:ssl_vpn} :  %{SYSLOGHOST} %{GREEDYDATA:source_ip}:%{NUMBER:source_port} - %{SYSLOGHOST} %{GREEDYDATA:destination_ip}:%{NUMBER:destination_port} - %{SYSLOGHOST}:%{SYSLOGHOST} %{SYSLOGHOST:username}:%{SYSLOGHOST:domain_name} - %{SYSLOGHOST} %{GREEDYDATA:app_name1} - %{GREEDYDATA:app_name2} - %{SYSLOGHOST} \"%{DATE_US:start_date}:%{TIME:start_time} GMT\" - %{SYSLOGHOST} %{SYSLOGHOST:connection_id}$",
				"message", "^%{CISCOTIMESTAMP:timestamp1} <%{SYSLOGHOST:netscaler_host}> %{SYSLOGHOST:netscaler_ip} %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:name} %{SYSLOGHOST:ppe_type} : %{GREEDYDATA:ssl_vpn} :  %{SYSLOGHOST} %{GREEDYDATA:source_ip}:%{NUMBER:source_port} - %{SYSLOGHOST} %{GREEDYDATA:destination_ip}:%{NUMBER:destination_port} - %{SYSLOGHOST}:%{SYSLOGHOST} %{SYSLOGHOST:username}:%{SYSLOGHOST:domain_name} - %{SYSLOGHOST} %{GREEDYDATA:app_name1} - %{SYSLOGHOST} \"%{DATE_US:start_date}:%{TIME:start_time} GMT\" - %{SYSLOGHOST} %{SYSLOGHOST:connection_id}$",
				"message", "^%{CISCOTIMESTAMP:timestamp1} <%{SYSLOGHOST:netscaler_host}> %{SYSLOGHOST:netscaler_ip} %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:name} %{SYSLOGHOST:ppe_type} : %{GREEDYDATA:ssl_vpn} :  %{SYSLOGHOST} %{SYSLOGHOST:source_ip}:%{SYSLOGHOST:source_port} - %{SYSLOGHOST} %{SYSLOGHOST:destination_ip}:%{SYSLOGHOST:destination_port} - %{SYSLOGHOST}:%{USER} %{SYSLOGHOST:username}:%{SYSLOGHOST:domain_name} - %{USER} \"%{DATE_US:start_date}:%{TIME:start_time} GMT\" - %{USER} \"%{DATE_US:end_date}:%{TIME:end_time} GMT\" - %{SYSLOGHOST} %{TIME:duration}  - %{USER} %{NUMBER:total_bytes_send} - %{USER} %{NUMBER:total_bytes_recv} - %{USER} %{NUMBER:total_compresses_bytes_send} - %{USER} %{NUMBER:total_compressed_bytes_recv} - %{USER} %{NUMBER:compression_ratio_send}\% - %{USER} %{NUMBER:compression_ratio_recv}\% - %{SYSLOGHOST} %{SYSLOGHOST:connection_id}$",
				"message", "^%{CISCOTIMESTAMP:timestamp1} <%{SYSLOGHOST:netscaler_host}> %{SYSLOGHOST:netscaler_ip} %{DATE_US}:%{TIME} GMT %{SYSLOGHOST:name} %{SYSLOGHOST:ppe_type} : %{GREEDYDATA:ssl_vpn} : %{SYSLOGHOST} %{SYSLOGHOST:source_ip}:%{NUMBER:source_port} - %{SYSLOGHOST} %{SYSLOGHOST:destination_ip}:%{NUMBER:destination_port} - %{SYSLOGHOST}:%{SYSLOGHOST} %{GREEDYDATA:username}:%{SYSLOGHOST:domain_name} - %{SYSLOGHOST} %{SYSLOGHOST:app_name1} - %{SYSLOGHOST:app_name2} - %{SYSLOGHOST} \"%{DATE_US:start_date}:%{TIME:start_time} GMT\" - %{SYSLOGHOST} %{SYSLOGHOST:connection_id}$",
				"message", "^%{CISCOTIMESTAMP:timestamp1} %{GREEDYDATA}$"
		]
		add_tag => ["netscaler"]
		}
}
}
#if no grok parse failures then proceed to here; 1-set timestamp and adjusts the start and end times if available
filter {
	if [type] == "ns" and "_grokparsefailure" not in [tags] {
#merging start time and changing string to date
			mutate {
				merge => {"start_date" => "start_time"}
				remove_field => ["start_time"]
			}
			#date {
			#	match => [ "start_date", "MM/dd/yyyy, HH:mm:ss" ]
			#	target => ["start_date"]
			#}
#merging end time and changing string to date
			mutate {
				merge => {"end_date" => "end_time"}
				remove_field => ["end_time"]
			}
			#date {
			#	match => [ "end_ts", "MM/dd/yy HH:mm:ss" ]
			#	target => ["end_ts"]
			#}
#set @timestamp
			date {
				match => [ "timestamp1", "MMM  dd HH:mm:ss" ]
			#	remove_field => ["timestamp1"]
			}
	}
}
#catches any erros when parsinf the dates that some have 2 spaces and other only have one space after the month
filter {
	if [type] == "ns" and "_dateparsefailure" in [tags] {
		date {
					match => [ "timestamp1", "MMM dd HH:mm:ss" ]
					remove_tag => ["_dateparsefailure"]
				}		
	}

}
#converting strings to other types and removing the timestamp extra field
filter {
	if [type] == "ns" and "netscaler" in [tags] {
	mutate {
		convert => { 
			"source_port" => "integer"
			"destination_port" => "integer"
			"total_bytes_send" => "integer"
			"total_bytes_recv" => "integer"
			"total_compresses_bytes_send" => "integer"
			"total_compressed_bytes_recv" => "integer"
			"compression_ratio_send" => "float"
			"compression_ratio_recv" => "float"
		}
		remove_field => ["timestamp1"]
	}

	}
}
#output method
output {
	#stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["10.20.52.136"]
		index => "logstash-netscaler-%{+YYYY.MM.dd}"
	}

}
